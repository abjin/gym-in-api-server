// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id
  nickname        String
  profileImageUrl String?
  accounts        Accounts[]        @relation("userToAccount")
  feeds           Feeds[]           @relation("userToFeed")
  comments        Comments[]        @relation("userToComment")
  feedLikes       FeedLikes[]       @relation("userToFeedLike")
  attendances     Attendances[]     @relation("userToAttendance")
  attendanceGoals AttendanceGoals[] @relation("userToAttendanceGoal")
}

model Accounts {
  id        String
  type      AccountType
  userId    String      @unique
  createdAt DateTime    @default(now())
  user      Users       @relation("userToAccount", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, type])
}

model Feeds {
  id            Int         @id @default(autoincrement())
  owner         String
  content       String
  imageUrls     Json
  createdAt     DateTime    @default(now())
  commentCounts Int         @default(0)
  likeCounts    Int         @default(0)
  comments      Comments[]  @relation("feedToComment")
  likes         FeedLikes[] @relation("feedToLike")
  author        Users       @relation("userToFeed", fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FeedLikes {
  feedId    Int
  userId    String
  createdAt DateTime @default(now())
  feed      Feeds    @relation("feedToLike", fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      Users    @relation("userToFeedLike", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([feedId, userId])
}

model Comments {
  id         Int      @id @default(autoincrement())
  feedId     Int
  owner      String
  content    String
  likeCounts Int      @default(0)
  createdAt  DateTime @default(now())
  author     Users    @relation("userToComment", fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feed       Feeds    @relation("feedToComment", fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Challenges {
  id           Int                             @id @default(autoincrement())
  name         String
  description  String
  type         ChallengeType
  startDate    DateTime                        @db.Date
  endDate      DateTime                        @db.Date
  rewards      ChallengeRewards[]              @relation("challengeToReward")
  participants ChallengeParticipants[]         @relation("challengeToParticipant")
  conditions   AttendanceChallengeConditions[] @relation("challengeToCondition")
}

model ChallengeRewards {
  challengeId Int
  days        Int
  type        ChallengeRewardType
  amount      Int
  challenge   Challenges          @relation("challengeToReward", fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([challengeId, days])
}

model ChallengeParticipants {
  participantId     Int                          @id @default(autoincrement())
  userId            String
  challengeId       Int
  challengeType     ChallengeType
  goalDays          Int
  successDays       Int                          @default(0)
  status            Boolean                      @default(false)
  participatedAt    DateTime                     @default(now())
  updatedAt         DateTime?
  challenge         Challenges                   @relation("challengeToParticipant", fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  certificationLogs ChallengeCertificationLogs[] @relation("participantToCertificationLog")
  rewardedAt        DateTime?

  @@unique([userId, challengeId])
}

model AttendanceChallengeConditions {
  challengeId Int        @id
  startTime   String // format: HH-mm
  endTime     String // fromat: HH-mm
  challenge   Challenges @relation("challengeToCondition", fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ChallengeCertificationLogs {
  participantId Int
  userId        String
  date          DateTime              @db.Date
  participant   ChallengeParticipants @relation("participantToCertificationLog", fields: [participantId], references: [participantId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([participantId, date])
}

model Attendances {
  id        Int      @id @default(autoincrement())
  owner     String
  date      DateTime @db.Date
  createdAt DateTime @default(now())

  user      Users       @relation("userToAttendance", fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exercises Exercises[] @relation("attendanceToExercise")

  @@unique([owner, date])
}

model Exercises {
  attendanceId Int
  type         ExerciseType

  attendance Attendances @relation("attendanceToExercise", fields: [attendanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([attendanceId, type])
}

model AttendanceGoals {
  owner     String
  type      AttendanceGoalType
  startDate DateTime           @db.Date
  endDate   DateTime           @db.Date
  goal      Int

  user Users @relation("userToAttendanceGoal", fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([owner, type, startDate, endDate])
}

enum AttendanceGoalType {
  monthly
  weekly
}

enum ExerciseType {
  chest
  back
  shoulder
  arm
  leg
  cardio
}

enum AccountType {
  kakao
  naver
}

enum ChallengeType {
  attendanceTime
}

enum ChallengeRewardType {
  experiencePoint
}
