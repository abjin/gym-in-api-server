// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String      @id
  nickname  String
  accounts  Accounts[]  @relation("userToAccount")
  feeds     Feeds[]     @relation("userToFeed")
  comments  Comments[]  @relation("userToComment")
  feedLikes FeedLikes[] @relation("userToFeedLike")
}

model Accounts {
  id        String
  type      AccountType
  userId    String      @unique
  createdAt DateTime    @default(now())
  user      Users       @relation("userToAccount", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, type])
}

model Feeds {
  id            Int         @id @default(autoincrement())
  owner         String
  content       String
  imageUrls     Json
  createdAt     DateTime    @default(now())
  commentCounts Int         @default(0)
  likeCounts    Int         @default(0)
  comments      Comments[]  @relation("feedToComment")
  likes         FeedLikes[] @relation("feedToLike")
  author        Users       @relation("userToFeed", fields: [owner], references: [id])
}

model FeedLikes {
  feedId Int
  userId String
  createdAt     DateTime    @default(now())
  feed   Feeds  @relation("feedToLike", fields: [feedId], references: [id])
  user   Users  @relation("userToFeedLike", fields: [userId], references: [id])

  @@unique([feedId, userId])
}

model Comments {
  id         Int    @id @default(autoincrement())
  feedId     Int
  owner      String
  content    String
  likeCounts Int    @default(0)
  author     Users  @relation("userToComment", fields: [owner], references: [id])
  feed       Feeds  @relation("feedToComment", fields: [feedId], references: [id])
}

enum AccountType {
  kakao
  naver
}
